/*
 * This Java source file was generated by the Gradle 'init' task.
 */

 //Author's Name: Tobenna Nwosu
 //UT Dallas undergraduate
 //Program's Purpose: Runs as an online banking system for users to interact with (has many interesting features).

 
 package github;

import java.time.DateTimeException;
import java.time.LocalDate;
import java.util.Scanner;
import java.time.Period;
import javax.swing.*;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
 
 public class mainBankSystem{
    Scanner customerInput = new Scanner(System.in);
    protected static String name;
    protected String questionString;
    public int questionInt;
    public int index;
    protected static double money,newMoney;
    protected static String secondID;
    protected String questionAsked;
    protected static String dob;
    private boolean highschoolAcc=false; 
    private boolean normalAcc=false;
    protected static boolean tryCatchFailed=false;
    protected static boolean checkingAcc=false;
    protected static boolean savingsAcc=false;
    protected static boolean checkingAccTwo=false;
    protected static boolean savingsAccTwo=false;
    protected static String accCheckOrSave;
    protected static String accCheckOrSaveTwo="";
    protected static String accNormalOrHigh;
    public String newUsername; 
    private String newPassword;
    private String oldUsername;
    private String oldPassword;
    boolean dateValidation=false;
    static JFrame frame=new JFrame();
    JPanel bluePanel;
    static JPanel redPanel=new JPanel();
    static JPanel calcPanel=new JPanel();
    JLabel bluePanelCheckOrSave,displayField;
    static ImageIcon logo,checkOrSave,settingsLogo,depositLogo,withdrawalsLogo,transferLogo,payBillsLogo,homeLogo,exitLogo;
    
     
    static bankApplication bankApp=new bankApplication();
    //Greets the user and ask for either login info/signup
     public void getGreeting() {
         JOptionPane.showMessageDialog(null,"Hello and welcoming to The Freedom Bank!\nHere you are free to make transactions that best fits your wishes!\n");
         String[] options={"Login","Create"};
         questionInt=JOptionPane.showOptionDialog(null,"Before we get started, we would like for you to login.\nIf you have an account, please select 'Login' or select 'Create'for a brand new account.",
         "User Login",JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
     }
     //Check string inputs from user to and compare it with itself, lowercase, and uppercase
     public String questionCheck(String questionAsked,String optionOne, String optionTwo){
         String ask;
         if ((questionAsked.equals(optionOne))||(questionAsked.equals(optionOne.toUpperCase()))||(questionAsked.equals(optionOne.toLowerCase()))){
             ask=optionOne;
         }
         else if((questionAsked.equals(optionTwo))||(questionAsked.equals(optionTwo.toUpperCase()))||(questionAsked.equals(optionTwo.toLowerCase()))){
             ask=optionTwo;
         }
         else{
             ask="Invalid";
         }
         return ask;
     }
     //Check if user input is a string
     public static boolean isString(String str){
         for (int i=0;i<str.length();i++){
             if(Character.isDigit(str.charAt(i))){
                 return false;
             }
         }
         return true;
     }
     //Ask user for their name and verifys it
     private void customerName(){
         boolean nameValidation;
         int nameSpaceDetected=0;
         name=JOptionPane.showInputDialog("Please type in your full legal name: ");
         nameValidation=isString(name);
         char[] stringSplit=name.toCharArray();
         for (char naming:stringSplit){
            if (Character.isWhitespace(naming)){
                nameSpaceDetected++;
                break;
            }
         }
         if ((nameValidation!=true)||(name.isEmpty())||(nameSpaceDetected==0)){
             JOptionPane.showMessageDialog(null,"Name is not valid, please try again: ");
             customerName();
         }
         else{
             questionInt=JOptionPane.showConfirmDialog(null, "Are you sure this is your real name?", "Confirmation", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
             if (questionInt==0){
                 JOptionPane.showMessageDialog(null,"Ok! Moving on, thank you!");
                 JOptionPane.showMessageDialog(null,"Nice to meet you "+name +"!");
             }
             else if (questionInt==1) {
                 JOptionPane.showMessageDialog(null,"Oh ok. Starting from the top......");
                 customerName();
             }
             else{
                 JOptionPane.showMessageDialog(null,"Invalid input, please try again");
                 customerName();
             }
         }
     }  
     private void ageVerification(){
        while (dateValidation==false) {
            dob=JOptionPane.showInputDialog(null,"Please type in your date of birth (YYYY-MM-DD): ");
            try{LocalDate localDate=LocalDate.parse(dob);
                System.out.println(localDate);
                dateValidation=true;
            }
            catch (DateTimeException x){
                    JOptionPane.showMessageDialog(null, "Date of Birth is not valid, please try again.");
                    ageVerification();
            }

        }
     }
     //Ask user for their date of birth and verifys their age
     //Additionally, their age decides which account is available for them (high school or normal)
     private void age() {
        int age=0;
        boolean ageConfirm=false;
        ageVerification();

        while (ageConfirm==false){ 
        LocalDate dateOfBirth=LocalDate.parse(dob);
        LocalDate currentDate=LocalDate.now();

         if ((dateOfBirth!=null)&&(currentDate!=null)&&(dateValidation==true)){
             age=(Period.between(dateOfBirth, currentDate).getYears());
             JOptionPane.showMessageDialog(null,"Just to be sure, your DOB is: "+dateOfBirth+"\nTherefore, you are "+age+" years old.");
             questionInt=JOptionPane.showConfirmDialog(null, "Are you sure this is your actual age?", "Confirmation", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
             if (questionInt==0){
                 JOptionPane.showMessageDialog(null,"Got it, thank you!");
                 ageConfirm=true;
 
             }
             else if (questionInt==1) {
                 JOptionPane.showMessageDialog(null, "Oh ok. Starting from the top again......");
             }
         }
     }
         if (age<13){
             JOptionPane.showMessageDialog(null,"Sadly, you don't qualify to have open an account. Good bye!");
             System.exit(0);
         }
         else if((age>=13)&&(age<=17)){
             JOptionPane.showMessageDialog(null,"Congratulations, you're qualified to open up a high school account!");
             highschoolAcc=true;
         }
         else if(age>=18){
             JOptionPane.showMessageDialog(null,"Congratulations, you're qualified to open up a regular account!");
             normalAcc=true;
         }
 
     }
     //Ask user for username and password to find saved information on files
     private void enterUserAndPass(){
        boolean foundLogin=false;
        while (foundLogin==false){
            index=0;
            oldUsername=JOptionPane.showInputDialog(null, "Username:");
            oldPassword=JOptionPane.showInputDialog(null, "Password:");
            try {
                BufferedReader user = new BufferedReader(new FileReader("userInfo.txt"));
                String readLine;
                while((readLine=user.readLine()) != null) {
                    if (readLine.equals(oldUsername)) {
                        String pass=Files.readAllLines(Paths.get("userInfo.txt")).get(index+1);
                        if(oldPassword.equals(pass)){
                            foundLogin=true;
                            break;
                        }
                        break;
                    }
                    index++;
                }
                if (foundLogin) {
                    JOptionPane.showMessageDialog(null,"Great, login successful!");
                } else {
                    JOptionPane.showMessageDialog(null, "Login is incorrect, please try again");
                }
                user.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
     }
     //Finally, this program will get the remaining info from the file,
     //Retrieves remaining information when user logs in,
     //Perfect for saving data without having to create another account.
     private String tryCatchInfo(){
        String temp="";
        try {
            BufferedReader user = new BufferedReader(new FileReader("userInfo.txt"));
            temp=Files.readAllLines(Paths.get("userInfo.txt")).get(index+2);
            index++;
            user.close();
            }
        catch (FileNotFoundException e) {
            e.printStackTrace();
            } 
        catch (IOException e) {
            e.printStackTrace();
            }
        return (temp);
     }
     private void getRemainingInfo(){
        name=tryCatchInfo();
        dob=tryCatchInfo();
        accCheckOrSave=tryCatchInfo();
        if(accCheckOrSave.equals("Checking")){
            checkingAcc=true;
        }
        else{
            savingsAcc=true;
        }
        accNormalOrHigh=tryCatchInfo();
        try {
            String tempMoney=tryCatchInfo();
            money=Double.parseDouble(tempMoney);
        }
        catch(NumberFormatException e){
            money=0.05;
        }
        secondID=tryCatchInfo();
        accCheckOrSaveTwo=tryCatchInfo();
        if(accCheckOrSaveTwo.equals("Checking")){
            checkingAccTwo=true;
        }
        else{
            savingsAccTwo=true;
        }
        try {
            String tempMoney=tryCatchInfo();
            newMoney=Double.parseDouble(tempMoney);
        }
        catch(NumberFormatException e){
            newMoney=0.05;
            tryCatchFailed=true;
        }
    }
     //Creates username for new users
     private void createUser(){
        boolean userValidation=false;
        int userUpperCaseDetected=0;
        int userCharacterDetected=0;
        int userSpaceDetected=0;
        int userNumberDetected=0;
        String numbers="1234567890";

        newUsername=JOptionPane.showInputDialog("Please enter your username.\nIt must contain at least: 8 characters\nOne uppercase letter\nNo space in between\nNo numbers");
        userValidation=isString(newUsername);
        char[] stringSplit=newUsername.toCharArray();
        for (char user: stringSplit){
            String test=""+user;
            if (numbers.contains(test)){
            userNumberDetected++;
            break;
            } 
        }
        if ((userValidation!=true)||(userNumberDetected>=1)){
             JOptionPane.showMessageDialog(null,"User is not valid, please try again: ");
             createUser();
         }
         else{
            for (char user: stringSplit){
                if (!Character.isWhitespace(user)){
                userCharacterDetected++;
                }
                else{
                    userSpaceDetected++;
                }
                String test=""+user;
                if ((test.toUpperCase()).equals(test)){
                  userUpperCaseDetected++;
                }
            }
            if((userCharacterDetected>=8)&&(userUpperCaseDetected>=1)&&(userSpaceDetected==0)){
                questionInt=JOptionPane.showConfirmDialog(null, "Are you sure want this as your username?", "Confirmation", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if (questionInt==0){
                    JOptionPane.showMessageDialog(null, "Oh ok, moving on....");
                }
                else if (questionInt==1){
                    JOptionPane.showMessageDialog(null, "Ok, starting over....");
                    createUser();
                }
            }
            else if((userCharacterDetected<8)||(userUpperCaseDetected<1)||(userSpaceDetected>=1)){
                JOptionPane.showMessageDialog(null, "Invalid user, starting over....");
                    createUser();
            }
        }

     }
     //Creates password for new users
     private void createPass(){
        int passCharacterDetected=0;
        int passUpperCaseDetected=0;
        int passNumbersDetected=0;
        int passSymbolDetected=0;
        int passSpaceDetected=0;
        String symbols="!@#$%&*()'+,-./:;<=>?[]^_`{|}";
        String numbers="1234567890";


        newPassword=JOptionPane.showInputDialog("Please enter your password.\nIt must contain:\nAt least \none Upper case letter\n8 characters\nOne symbol( ! , . / @)\n2 numbers\nNo space in between");
        char[] stringSplit=newPassword.toCharArray();
         if (passCharacterDetected==0){
            for (char user: stringSplit){
                String test=""+user;
                if(!Character.isWhitespace(user)){
                    passCharacterDetected++;
                    if(numbers.contains(test)){
                        passNumbersDetected++;
                    }
                    else if(symbols.contains(test)){
                        passSymbolDetected++;
                    }
                    else if ((Character.toUpperCase(user)==user)&&(!numbers.contains(test))){
                        passUpperCaseDetected++;
                    }
                }
                else{
                    passSpaceDetected++;
                }
            }
            if((passCharacterDetected>=8)&&(passUpperCaseDetected>=1)&&(passNumbersDetected>=2)&&(passSymbolDetected>=1)&&(passSpaceDetected==0)){
                questionInt=JOptionPane.showConfirmDialog(null, "Are you sure want this as your password?", "Confirmation", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if (questionInt==0){
                    JOptionPane.showMessageDialog(null, "Oh ok, moving on....");
                }
                else if (questionInt==1){
                    JOptionPane.showMessageDialog(null, "Ok, starting over....");
                    createPass();
                }
            }
            else if((passCharacterDetected<8)||(passUpperCaseDetected<1)||(passNumbersDetected<2)||(passSymbolDetected==0)||(passSpaceDetected>=1)){
                JOptionPane.showMessageDialog(null, "Invalid password, starting over....");
                    createPass();
            }
        }

     }
     //Sends new login info to a file. User can run the program again to have saved information.
     private void sendNewInfoToFile(){
        generateSecondaryID();
        JOptionPane.showMessageDialog(null,"Great, we have everything we need from you.\nTo test out your login please enter your \nusername and password on the next tab");
        try {
        FileWriter login=new FileWriter("userInfo.txt",true);
        login.append(newUsername+"\n");
        login.append(newPassword+"\n");
        login.append(name+"\n");
        login.append(dob+"\n");
        if (checkingAcc==true){
            login.append("Checking\n");
        }
        else if(savingsAcc==true){
            login.append("Savings\n");
        }
        if(highschoolAcc==true){
            login.append("High school account\n");
        }
        else if(normalAcc==true){
            login.append("Normal account\n");
        }
        login.append(money+"\n");
        login.append(secondID+"\n");
        login.append("EmptySecondAcc"+secondID+"\n");
        login.append("EmptySecondMoney"+secondID+"\n");
        login.append("\n");
        login.flush();
        login.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
    
}
    //User signs up for the Freedom Bank for the first time
     private void createAcc() {
         customerName();
         age();       
         checkingOrSavings();
         JOptionPane.showMessageDialog(null,"Now that we have all of your info,\nlet's go ahead and set up your username and password.");
         createUser();
         createPass();
         generateRandomMoney();
         sendNewInfoToFile();
         enterUserAndPass();
         tryCatchFailed=true; 
         }
    //Ask user if they want to open up a new savings/checking account.
     protected void checkingOrSavings() {
         questionAsked=JOptionPane.showInputDialog(null,"What account would you like to open up today? (checking/savings)");
         questionString=questionCheck(questionAsked,"Checking","Savings");
         if (questionString.equals("Checking")){
             questionInt=JOptionPane.showConfirmDialog(null, "You have chosen a checking account. Is this correct?", "Confirmation", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
             if (questionInt==0){
                 JOptionPane.showMessageDialog(null,"Got it, thank you!");
                 checkingAcc=true;
                 accCheckOrSave="Checking";
 
             }
             else if (questionInt==1) {
                 JOptionPane.showMessageDialog(null, "Oh ok. Starting from the top again......");
                 checkingOrSavings();
             }
         }
         else if (questionString.equals("Savings")){
             questionInt=JOptionPane.showConfirmDialog(null, "You have chosen a savings account. Is this correct?", "Confirmation", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
             if (questionInt==0){
                 JOptionPane.showMessageDialog(null,"Got it, thank you!");
                 savingsAcc=true;
                 accCheckOrSave="Checking";
             }
             else if (questionInt==1) {
                 JOptionPane.showMessageDialog(null,"Oh ok. Starting from the top again......");
                 checkingOrSavings();
             }
             else{
                 JOptionPane.showMessageDialog(null,"Invalid input, please try again");
                 checkingOrSavings();
             }
         }
         else{
             JOptionPane.showMessageDialog(null,"Invalid input, please try again");
                 checkingOrSavings();
         }
     }
     //Generate random money in user's checking/savings account(s)
     protected void generateRandomMoney(){
        money=(Math.random()*((5000)+1)+0.00);
        money=Math.round(money*100.00)/100.00;
     }
     protected void generateSecondaryID(){
        secondID=""+(int)(Math.random()*((5000)+1)+0.00);
     }
     
     public static void main(String[] args) {
         mainBankSystem bank= new mainBankSystem();
         bank.getGreeting();
         if (bank.questionInt==0){
             bank.enterUserAndPass();
             bank.getRemainingInfo();
         }
         else if(bank.questionInt==1){
             bank.createAcc();
         }
         bank.customerInput.close();
         homeMenuApp home=new homeMenuApp();
         calculator calc=new calculator();
         bankApp.bankFrame();
         bankApp.bluePanel();
         bankApp.redPanel();
         home.welcomeUser();
         home.homeGIF();
         calc.calcNum();
         bankApp.tabButtons(bankApplication.homeMenu, "Main Menu", "homeLogo.png",homeLogo,250);
         bankApp.tabButtons(bankApplication.checkOrSaveButton,accCheckOrSave,bankApp.cSString ,checkOrSave, 325);
         bankApp.tabButtons(bankApplication.deposits, "Deposit", "depositLogo.png",depositLogo, 400);
         bankApp.tabButtons(bankApplication.withdrawals, "Withdrawal", "withdrawalLogo.png",withdrawalsLogo, 475);
         bankApp.tabButtons(bankApplication.transfers, "Transfer", "transfer.png",transferLogo, 550);
         bankApp.tabButtons(bankApplication.payBills, "Pay Bills", "billLogo.png",payBillsLogo, 625);
         bankApp.tabButtons(bankApplication.settings, "Settings", "settings.png",settingsLogo, 700);
         bankApp.tabButtons(bankApplication.exit, "Exit", "exit.png",exitLogo, 774);
         bankApp.bankFrameCustomization();
     }
 }
